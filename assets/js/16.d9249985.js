(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{190:function(t,e,s){"use strict";s.r(e);var a=s(1),r=Object(a.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("h4",{attrs:{id:"demo地址-https-github-com-yuhang1992-crossdomain-git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#demo地址-https-github-com-yuhang1992-crossdomain-git","aria-hidden":"true"}},[t._v("#")]),t._v(" demo地址 "),s("a",{attrs:{href:"https://github.com/yuhang1992/crossDomain.git",target:"_blank",rel:"noopener noreferrer"}},[t._v("\bhttps://github.com/yuhang1992/crossDomain.git"),s("OutboundLink")],1)]),t._v(" "),t._m(1),t._v(" "),s("p",[t._v("同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。同源指：协议、域名、端口号必须一致。这个就是同源策略的保护,如果浏览器对javascript没有同源策略的保护,那么一些重要的机密网站将会很危险")]),t._v(" "),s("p",[t._v("下表给出了相对http://a.example.com:80同源检测的结果:")]),t._v(" "),t._m(2),t._v(" "),s("p",[t._v("那跨源有什么后果呢？归纳有三：不能获取 Cookie、LocalStorage；不能获取 dom 节点；不能进行一般的 Ajax 通信；跨域解决方案的出现就是为了解决以上痛处。")]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),s("p",[t._v("JSONP是服务器与客户端跨源通信的常用方法。最大特点就是简单适用，老式浏览器全部支持，服务器改造非常小。")]),t._v(" "),s("p",[t._v("它的基本思想是，网页通过添加一个script元素，向服务器请求JSON数据，这种做法不受同源政策限制；服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。")]),t._v(" "),s("p",[t._v("首先，网页动态插入script元素，由它向跨源网址发出请求。")]),t._v(" "),t._m(5),s("p",[t._v("上面代码通过动态添加script元素，向服务器localhost:3001发出请求。注意，该请求的查询字符串有一个callback参数，用来指定回调函数的名字，这对于JSONP是必需的。")]),t._v(" "),s("p",[t._v("服务器收到这个请求以后，会将数据放在回调函数的参数位置返回。")]),t._v(" "),t._m(6),s("p",[t._v("由于script元素请求的脚本，直接作为代码运行。这时，只要浏览器定义了myFunction函数，该函数就会立即调用。作为参数的JSON数据被视为JavaScript对象，而不是字符串，因此避免了使用JSON.parse的步骤。")]),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),s("p",[s("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/04/cors.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("CORS"),s("OutboundLink")],1),t._v('是一个W3C标准，全称是"跨域资源共享"（Cross-origin resource sharing）。\n它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。')]),t._v(" "),s("p",[t._v("整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。")]),t._v(" "),s("p",[t._v("因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。")]),t._v(" "),s("p",[t._v("需要在服务端设置字段 Access-Control-Allow-Origin，它的作用就是设置允许来自什么源的请求，如果值设置为 *，表明允许来自任意源的请求。")]),t._v(" "),t._m(10),t._v(" "),t._m(11),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.nginx.com/resources/wiki/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nginx (engine x)"),s("OutboundLink")],1),t._v(" 是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP服务器。")]),t._v(" "),s("p",[t._v("Nginx配置：")]),t._v(" "),t._m(15)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"跨域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跨域","aria-hidden":"true"}},[this._v("#")]),this._v(" 跨域")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_1-什么是跨域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是跨域","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.什么是跨域")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("url")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("结果")]),t._v(" "),s("th",{staticStyle:{"text-align":"right"}},[t._v("原因")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("http://a.example.com:80/index")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("同源")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}})]),t._v(" "),s("tr",[s("td",[t._v("https://a.example.com:80/index")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("跨源")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("协议不同")])]),t._v(" "),s("tr",[s("td",[t._v("http://b.example.com:80/index")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("跨源")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("域名不同")])]),t._v(" "),s("tr",[s("td",[t._v("http://a.example.com:81/index")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("跨源")]),t._v(" "),s("td",{staticStyle:{"text-align":"right"}},[t._v("端口不同")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_2-跨域的解决方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-跨域的解决方案","aria-hidden":"true"}},[this._v("#")]),this._v(" 2.跨域的解决方案")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"jsonp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsonp","aria-hidden":"true"}},[this._v("#")]),this._v(" jsonp")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function addScriptTag(src) {\n  var script = document.createElement('script');\n  script.setAttribute(\"type\",\"text/javascript\");\n  script.src = src;\n  document.body.appendChild(script);\n}\n\nwindow.onload = function () {\n  addScriptTag('http://localhost:3001?callback=myFunction');\n}\n\nfunction myFunction (data) {\n    alert('获取数据成功，2s后改变数据！')\n    let p = document.getElementsByTagName('p')[0]\n    setTimeout(function () {\n        p.innerHTML = data.message\n    }, 2000)\n    // 2s后p标签内的内容将改变\n}\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("{'message': 'hello world from JSONP!'}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("WARNING")]),this._v(" "),e("p",[this._v("jsonp有明显的几点硬伤\n返回json变成返回js了，所以服务器是要改动支持的，不是调用方一厢情愿说用就能用的。只支持get请求，不支持post、put、delete等；不安全，容易受xss攻击。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"cors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cors","aria-hidden":"true"}},[this._v("#")]),this._v(" CORS")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简介","aria-hidden":"true"}},[this._v("#")]),this._v(" 简介")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("TIP")]),this._v(" "),e("p",[this._v("如何利用 CORS 实现 Cookie 的跨域传送?\n首先在服务器随意设置个 Cookie 值下发到浏览器，如果非跨域的情况下，浏览器再次请求服务器时就会带上服务器给的 Cookie，但是跨域的时候需在服务端设置 Access-Control-Allow-Credentials 字段以及在客户端设置 withCredentials 字段，两者缺一不可，代码如下：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("\n服务端代码\nconst server = http.createServer((req, res) => {\n  res.setHeader('Access-Control-Allow-Origin', 'http://127.0.0.1:3001') // 必填：接受域的请求\n  res.setHeader('Set-Cookie', ['type=muyy']) // 下发 cookie\n  res.setHeader('Access-Control-Allow-Credentials', true) // ② 选填：是否允许浏览器传 cookie 到服务端，只能设置为 true\n  res.end('date from cors')\n})\n\n前端代码\nconfig.withCredentials = true // 传 cookie 的时候前端要做的\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("TIP")]),this._v(" "),e("p",[this._v("需要注意的是，如果要发送Cookie，Access-Control-Allow-Origin就不能设为星号，必须指定明确的、与请求网页一致的域名")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("WARNING")]),this._v(" "),e("p",[this._v("优点是支持所有类型的 HTTP 方法，\n缺点是有些老的浏览器不支持 CORS")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"nginx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nginx","aria-hidden":"true"}},[this._v("#")]),this._v(" Nginx")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("server{\n    # 监听9099端口\n    listen 9099;\n    # 域名是localhost\n    server_name localhost;\n    #凡是localhost:9099/api这个样子的，都转发到真正的服务端地址http://localhost:9871\n    location ^~ /api {\n    proxy_pass http://localhost:9871;\n    }\n}\n")])])])}],!1,null,null,null);r.options.__file="cross-domain.md";e.default=r.exports}}]);